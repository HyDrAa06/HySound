@using HySound.ViewModels.Album
@model AlbumViewModel

@if (Model == null)
{
    <div class="error-message">
        <h2>Албумът не е намерен</h2>
        <p>Търсеният албум не може да бъде намерен. Моля, опитайте отново.</p>
        <a asp-controller="Home" asp-action="Search" class="back-btn" title="Назад">
            <i class="fas fa-arrow-left"></i>
        </a>
    </div>
}
else
{
    <div class="album-details">
        <div class="album-header" id="albumHeader">
            <div class="album-cover-container">
                <div class="back-button-container">
                    <a asp-action="Search" asp-controller="Home" class="back-btn" title="Назад">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                </div>
                <img src="@(Model.CoverImage ?? "/images/default-cover.jpg")" alt="@(Model.Title ?? "Неизвестен албум")" class="album-cover" id="albumCover" />
            </div>
            <div class="album-info">
                <p class="album-type">АЛБУМ</p>
                <h1 class="album-title">@(Model.Title ?? "Неизвестен албум")</h1>
                <div class="album-meta">
                    @if (!string.IsNullOrEmpty(Model.UserName))
                    {
                        <a href="/user/@Model.UserName" class="creator-link">
                            <div class="creator-avatar">
                                <img src="@(Model.CoverImage ?? "/images/default-avatar.jpg")" alt="@Model.UserName" />
                            </div>
                            <span class="creator-name">@Model.UserName</span>
                        </a>
                    }
                    <p class="album-stats">
                        @if (Model.Tracks != null)
                        {
                            <span>@Model.Tracks.Count() песни</span>
                            <span class="dot-separator">•</span>
                        }
                    </p>
                </div>
            </div>
        </div>

        <div class="album-content">
            <div class="album-actions">
                <button class="play-all-btn" id="playAllBtn">
                    <i class="fas fa-play"></i>
                </button>
                @if (Model.IsLiked == true)
                {
                    <a asp-controller="Like" asp-action="DislikeAlbum" asp-route-id="@Model.Id" class="dislike-btn" title="Премахни от твоята библиотека">
                        <i class="fas fa-heart"></i>
                    </a>
                }
                else
                {
                    <a asp-controller="Like" asp-action="LikeAlbum" asp-route-id="@Model.Id" class="like-btn" title="Запази в твоята библиотека">
                        <i class="far fa-heart"></i>
                    </a>
                }

                <button class="options-btn" title="Още опции">
                    <i class="fas fa-ellipsis-h"></i>
                </button>
            </div>

            <div class="tracklist-container">
                <div class="tracklist-header">
                    <div class="track-number">#</div>
                    <div class="track-title">ЗАГЛАВИЕ</div>
                    <div class="track-duration">
                        <i class="far fa-clock"></i>
                    </div>
                </div>

                <ul class="tracklist">
                    @if (Model.Tracks != null && Model.Tracks.Any())
                    {
                        int trackNumber = 1;
                        foreach (var track in Model.Tracks)
                        {
                            <li class="track" data-index="@(trackNumber - 1)">
                                <div class="track-number-cell">
                                    <span class="track-number">@trackNumber</span>
                                    <button class="play-btn"
                                            data-src="@(track.AudioUrl ?? "")"
                                            data-title="@(track.Title ?? "Неизвестна песен")"
                                            data-artist="@(Model.UserName ?? "Неизвестен изпълнител")"
                                            data-image="@(track.CoverImage ?? "/images/default-cover.jpg")">
                                        <i class="fas fa-play"></i>
                                    </button>
                                </div>
                                <div class="track-info">
                                    <img src="@(track.CoverImage ?? "/images/default-cover.jpg")" alt="@(track.Title ?? "Неизвестна песен")" class="track-cover">
                                    <div class="track-text">
                                        <span class="track-name">@(track.Title ?? "Неизвестна песен")</span>
                                        <span class="track-artist">@(Model.UserName ?? "Неизвестен изпълнител")</span>
                                    </div>
                                </div>
                                <div class="track-duration">
                                    <button class="like-track-btn" title="Запази в твоята библиотека">
                                        <i class="far fa-heart"></i>
                                    </button>
                                    <button class="more-options-btn" title="Още">
                                        <i class="fas fa-ellipsis-h"></i>
                                    </button>
                                </div>
                            </li>
                            trackNumber++;
                        }
                    }
                    else
                    {
                        <li class="empty-tracklist">
                            <p>Няма налични песни за този албум.</p>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

<style>
    /* Стилове за детайлите на албума */
    :root {
        --spotify-green: #1DB954;
        --spotify-green-hover: #1ed760;
        --spotify-black: #121212;
        --spotify-grey: #b3b3b3;
        --spotify-light-grey: #333333;
        --spotify-darkgrey: #181818;
    }

    body {
        background-color: var(--spotify-black);
        margin: 0;
        padding: 0;
        font-family: 'Circular', 'Helvetica Neue', Arial, sans-serif;
    }

    .album-details {
        display: flex;
        flex-direction: column;
        color: white;
        padding: 0;
        max-width: 100%;
        margin: 0 auto;
    }

    /* Бутон за връщане */
    .back-button-container {
        position: absolute;
        top: 16px;
        left: 16px;
        z-index: 3;
        padding: 0;
    }

    .back-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        background: rgba(18, 18, 18, 0.7);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--spotify-grey);
        font-size: 14px;
        border-radius: 50%;
        text-decoration: none;
        transition: all 0.3s ease;
        padding: 0;
    }

        .back-btn i {
            font-size: 14px;
            margin: 0;
        }

        .back-btn:hover {
            background: rgba(51, 51, 51, 0.7);
            border-color: var(--spotify-grey);
            color: white;
        }

    .album-header {
        display: flex;
        align-items: flex-start;
        gap: 30px;
        width: 100%;
        padding: 32px;
        background: linear-gradient(transparent 0, rgba(0, 0, 0, 0.5) 100%);
        position: relative;
        min-height: 300px;
    }

        .album-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(transparent 0, rgba(0, 0, 0, 0.8) 100%);
            z-index: 1;
        }

    .album-cover-container {
        flex-shrink: 0;
        position: relative;
        z-index: 2;
    }

    .album-cover {
        width: 232px;
        height: 232px;
        object-fit: cover;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    }

    .album-info {
        display: flex;
        flex-direction: column;
        padding-bottom: 10px;
        position: relative;
        z-index: 2;
        margin-top: 48px;
    }

    .album-type {
        font-size: 12px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin: 0 0 8px;
    }

    .album-title {
        font-size: 72px;
        font-weight: 900;
        margin: 0 0 12px;
        line-height: 1.1;
    }

    .album-meta {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 8px;
    }

    .creator-link {
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .creator-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        overflow: hidden;
    }

        .creator-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .creator-name {
        color: white;
        font-weight: 700;
        font-size: 14px;
    }

        .creator-name:hover {
            text-decoration: underline;
        }

    .album-stats {
        font-size: 14px;
        color: var(--spotify-grey);
        margin: 0;
    }

    .dot-separator {
        margin: 0 4px;
    }

    .album-content {
        background-color: var(--spotify-black);
        padding: 24px 32px 48px;
    }

    .album-actions {
        display: flex;
        align-items: center;
        gap: 16px;
        margin-bottom: 32px;
    }

    .play-all-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 56px;
        height: 56px;
        background: var(--spotify-green);
        color: white;
        font-size: 24px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }

        .play-all-btn:hover {
            background: var(--spotify-green-hover);
            transform: scale(1.05);
        }

    .like-btn, .options-btn {
        background: none;
        border: none;
        color: var(--spotify-grey);
        font-size: 20px;
        cursor: pointer;
        transition: all 0.2s;
        padding: 0;
    }

        .like-btn:hover, .options-btn:hover {
            color: white;
        }

    .tracklist-container {
        margin-top: 8px;
    }

    .tracklist-header {
        display: grid;
        grid-template-columns: 50px 1fr 120px;
        padding: 0 16px 8px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--spotify-grey);
        font-size: 14px;
        font-weight: 400;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .tracklist {
        list-style: none;
        padding: 0;
        width: 100%;
        margin: 0;
    }

    .track {
        display: grid;
        grid-template-columns: 50px 1fr 120px;
        padding: 12px 16px;
        border-radius: 4px;
        transition: background 0.2s;
        align-items: center;
    }

        .track:hover {
            background: rgba(255, 255, 255, 0.1);
        }

    .track-number-cell {
        display: flex;
        align-items: center;
        width: 100%;
        position: relative;
    }

    .track-number {
        color: var(--spotify-grey);
        font-size: 16px;
    }

    .track:hover .track-number {
        display: none;
    }

    .play-btn {
        background: none;
        border: none;
        color: white;
        font-size: 16px;
        cursor: pointer;
        opacity: 0;
        position: absolute;
        left: 0;
        transition: opacity 0.2s;
    }

    .track:hover .play-btn {
        opacity: 1;
    }

    .track-info {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .track-cover {
        width: 40px;
        height: 40px;
        object-fit: cover;
    }

    .track-text {
        display: flex;
        flex-direction: column;
        min-width: 0;
    }

    .track-name {
        font-size: 16px;
        font-weight: 400;
        color: white;
        margin-bottom: 4px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .track-artist {
        font-size: 14px;
        color: var(--spotify-grey);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .track-artist:hover {
            color: white;
            text-decoration: underline;
            cursor: pointer;
        }

    .track-duration {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        gap: 16px;
        color: var(--spotify-grey);
        font-size: 14px;
    }

    .like-track-btn, .more-options-btn {
        background: none;
        border: none;
        color: var(--spotify-grey);
        font-size: 14px;
        cursor: pointer;
        opacity: 0;
        transition: color 0.2s;
        padding: 0;
    }

    .track:hover .like-track-btn,
    .track:hover .more-options-btn {
        opacity: 1;
    }

    .like-track-btn:hover, .more-options-btn:hover {
        color: white;
    }

    .empty-tracklist {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 0;
        text-align: center;
    }

        .empty-tracklist p {
            color: var(--spotify-grey);
            font-size: 16px;
            margin-bottom: 16px;
        }

    .error-message {
        text-align: center;
        color: white;
        padding: 40px;
    }

        .error-message a {
            color: var(--spotify-green);
            text-decoration: none;
        }

            .error-message a:hover {
                color: var(--spotify-green-hover);
            }

    /* Стилове, свързани с плейъра от оригиналния файл */
    #sound-bar {
        -webkit-appearance: none;
        width: 100px;
        height: 4px;
        background: #333;
        outline: none;
        border-radius: 2px;
        cursor: pointer;
    }

        #sound-bar::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 12px;
            height: 12px;
            background: #1DB954;
            border-radius: 50%;
            cursor: pointer;
        }

        #sound-bar::-moz-range-thumb {
            width: 12px;
            height: 12px;
            background: #1DB954;
            border-radius: 50%;
            cursor: pointer;
        }

    

    .dislike-btn {
        background: none;
        border: none;
        color: #ff0000;
        font-size: 20px;
        cursor: pointer;
        padding: 0;
        transition: all 0.3s ease;
        position: relative;
    }

        .dislike-btn i {
            transition: all 0.3s ease;
        }

        .dislike-btn:hover {
            color: #ff3333;
            text-shadow: 0 0 10px rgba(255, 0, 0, 0.8), 0 0 20px rgba(255, 0, 0, 0.6), 0 0 30px rgba(255, 0, 0, 0.4);
        }

        .dislike-btn:active {
            transform: scale(0.95);
        }

    /* Анимация за сияние */
    @@keyframes glow {
        0% {
            text-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }

        50% {
            text-shadow: 0 0 15px rgba(255, 0, 0, 0.8), 0 0 25px rgba(255, 0, 0, 0.6);
        }

        100% {
            text-shadow: 0 0 5px rgba(255, 0, 0, 0.5);
        }
    }

    /* Актуализиране на съществуващите стилове за заглавието на албума */
    .album-header {
        display: flex;
        align-items: flex-start;
        gap: 30px;
        width: 100%;
        padding: 32px;
        background: linear-gradient(transparent 0, rgba(0, 0, 0, 0.5) 100%);
        position: relative;
        min-height: 300px;
    }

    /* Актуализиране на контейнера за бутона за връщане */
    .back-button-container {
        position: absolute;
        top: 16px;
        left: 16px;
        z-index: 3;
        padding: 0;
    }

    /* Актуализиране на стиловете за бутона за връщане */
    .back-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        background: rgba(18, 18, 18, 0.7);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--spotify-grey);
        font-size: 14px;
        border-radius: 50%;
        text-decoration: none;
        transition: all 0.3s ease;
        padding: 0;
    }

        .back-btn i {
            font-size: 14px;
            margin: 0;
        }

        .back-btn:hover {
            background: rgba(51, 51, 51, 0.7);
            border-color: var(--spotify-grey);
            color: white;
        }

    /* Уверете се, че корицата на албума остава на място */
    .album-cover-container {
        flex-shrink: 0;
        position: relative;
        z-index: 2;
    }

    /* Адаптиране на позицията на информацията за албума */
    .album-info {
        display: flex;
        flex-direction: column;
        padding-bottom: 10px;
        position: relative;
        z-index: 2;
        margin-top: 48px;
    }

    /* Отзивчиви адаптации */
    @@media (max-width: 768px) {
        .album-header {
            padding: 16px;
        }

        .back-button-container {
            top: 8px;
            left: 8px;
        }

        .album-info {
            margin-top: 36px;
        }
    }

    .dislike-btn.liked {
        animation: glow 1.5s infinite;
    }

    /* Отзивчиви стилове */
    @@media (max-width: 768px) {
        .album-header {
            flex-direction: column;
            align-items: center;
            text-align: center;
            padding: 32px 16px;
        }

        .album-cover {
            width: 192px;
            height: 192px;
            margin-bottom: 24px;
        }

        .album-title {
            font-size: 32px;
        }

        .album-meta {
            flex-direction: column;
            align-items: center;
        }
    }

    @@media (max-width: 480px) {
        .tracklist-header .track-duration {
            display: none;
        }

        .tracklist-header {
            grid-template-columns: 32px 1fr;
        }

        .track {
            grid-template-columns: 32px 1fr 80px;
        }

        .like-track-btn {
            display: none;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const isAlbumDetailsPage = window.location.pathname.includes('AlbumDetails');
        if (!isAlbumDetailsPage) return;

        if (!document.querySelector('link[href*="font-awesome"]')) {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css';
            document.head.appendChild(link);
        }

        function setHeaderBackground() {
            const coverImage = document.getElementById('albumCover');
            const header = document.getElementById('albumHeader');

            if (!coverImage || !header) return;

            try {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                const img = new Image();

                img.crossOrigin = 'Anonymous';
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;

                    context.drawImage(img, 0, 0);

                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height / 4);
                    const data = imageData.data;

                    let r = 0, g = 0, b = 0;
                    const pixelCount = data.length / 4;

                    for (let i = 0; i < data.length; i += 4) {
                        r += data[i];
                        g += data[i + 1];
                        b += data[i + 2];
                    }

                    r = Math.floor(r / pixelCount);
                    g = Math.floor(g / pixelCount);
                    b = Math.floor(b / pixelCount);

                    header.style.backgroundImage = `linear-gradient(rgba(${r}, ${g}, ${b}, 0.7) 0%, rgba(18, 18, 18, 1) 100%)`;
                };

                img.src = coverImage.src;
            } catch (error) {
                console.error("Грешка при задаване на динамичен цвят на заглавието:", error);
            }
        }

        setHeaderBackground();

        const globalAudio = document.getElementById("global-audio");
        const globalAudioSource = document.getElementById("global-audio-source");
        const playButton = document.getElementById("play-btn");
        const prevButton = document.getElementById("prev-btn");
        const nextButton = document.getElementById("next-btn");
        const songImage = document.getElementById("song-image");
        const songTitle = document.getElementById("song-title");
        const artistName = document.getElementById("artist-name");
        const timebar = document.getElementById("timebar");
        const soundBar = document.getElementById("sound-bar");
        const playerContainer = document.querySelector('.player-container');
        const playAllBtn = document.getElementById('playAllBtn');
        const playButtons = document.querySelectorAll('.play-btn');

        let trackList = [];
        let currentTrackIndex = 0;
        let isPlaying = false;
        const defaultImage = '/images/default-cover.jpg';

        if (playButton && prevButton && nextButton) {
            [playButton, prevButton, nextButton].forEach(btn => {
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
            });
        }

        const updatedPlayButton = document.getElementById("play-btn");
        const updatedPrevButton = document.getElementById("prev-btn");
        const updatedNextButton = document.getElementById("next-btn");

        function populateTrackList() {
            trackList = Array.from(playButtons)
                .map(btn => ({
                    file: btn.dataset.src || '',
                    title: btn.dataset.title || 'Неизвестно заглавие',
                    artist: btn.dataset.artist || 'Неизвестен изпълнител',
                    image: btn.dataset.image || defaultImage
                }))
                .filter(track => track.file);
        }

        function loadTrack(index, shouldPlay = false) {
            if (!trackList.length || !globalAudio || !globalAudioSource) return;
            index = Math.max(0, Math.min(index, trackList.length - 1));

            const track = trackList[index];
            globalAudioSource.src = track.file;
            if (songImage) songImage.src = track.image;
            if (songTitle) songTitle.textContent = track.title;
            if (artistName) artistName.textContent = track.artist;
            globalAudio.load();
            globalAudio.currentTime = 0;
            if (timebar) {
                timebar.value = 0;
                timebar.style.background = `linear-gradient(to right, #1DB954 0%, #333 0%)`;
            }
            if (soundBar) globalAudio.volume = soundBar.value / 100;
            currentTrackIndex = index;

            if (updatedPlayButton) updatePlayButton(shouldPlay);
            if (shouldPlay) {
                playTrack();
            }
            saveTrackState();
        }

        function playTrack() {
            if (!globalAudio) return;

            const playPromise = globalAudio.play();
            if (playPromise) {
                playPromise
                    .then(() => {
                        isPlaying = true;
                        if (playerContainer) playerContainer.classList.add('visible');
                    })
                    .catch(error => console.error('Грешка при възпроизвеждане:', error));
            }
        }

        function pauseTrack() {
            if (!globalAudio) return;

            globalAudio.pause();
            isPlaying = false;
            updatePlayButton(false);
            saveTrackState();
        }

        function updatePlayButton(isPlayingState) {
            if (!updatedPlayButton) return;

            const icon = updatedPlayButton.querySelector("i");
            if (icon) {
                icon.classList.toggle("fa-play", !isPlayingState);
                icon.classList.toggle("fa-pause", isPlayingState);
            }
        }

        function saveTrackState() {
            if (!globalAudio || !globalAudioSource) return;

            localStorage.setItem("currentTrack", JSON.stringify({
                file: globalAudioSource.src,
                title: songTitle ? songTitle.textContent : '',
                artist: artistName ? artistName.textContent : '',
                image: songImage ? songImage.src : '',
                time: globalAudio.currentTime,
                isCurrentlyPlayed: isPlaying,
                volume: soundBar ? soundBar.value : 50
            }));
        }

        function loadStoredTrack() {
            if (!globalAudio || !globalAudioSource) return;

            const storedTrack = JSON.parse(localStorage.getItem("currentTrack"));
            if (storedTrack) {
                globalAudioSource.src = storedTrack.file;
                globalAudio.load();
                globalAudio.currentTime = storedTrack.time || 0;
                if (songImage) songImage.src = storedTrack.image;
                if (songTitle) songTitle.textContent = storedTrack.title;
                if (artistName) artistName.textContent = storedTrack.artist;
                if (soundBar) {
                    soundBar.value = storedTrack.volume || 50;
                    globalAudio.volume = soundBar.value / 100;
                }
                const progress = (storedTrack.time / globalAudio.duration) * 100 || 0;
                if (timebar) {
                    timebar.value = progress;
                    timebar.style.background = `linear-gradient(to right, #1DB954 ${progress}%, #333 ${progress}%)`;
                }
                if (updatedPlayButton) updatePlayButton(storedTrack.isCurrentlyPlayed);
                if (storedTrack.isCurrentlyPlayed) {
                    playTrack();
                }
            } else if (trackList.length) {
                loadTrack(0, false);
            }
        }

        window.loadTrack = loadTrack;

        if (updatedPlayButton) {
            updatedPlayButton.addEventListener("click", function () {
                if (isPlaying) {
                    pauseTrack();
                } else {
                    playTrack();
                }
            });
        }

        if (updatedPrevButton) {
            updatedPrevButton.addEventListener("click", () => loadTrack(currentTrackIndex - 1, isPlaying));
        }

        if (updatedNextButton) {
            updatedNextButton.addEventListener("click", () => loadTrack(currentTrackIndex + 1, isPlaying));
        }

        if (globalAudio && timebar) {
            globalAudio.addEventListener("timeupdate", function () {
                if (!isNaN(globalAudio.duration)) {
                    const progress = (globalAudio.currentTime / globalAudio.duration) * 100;
                    timebar.value = progress;
                    timebar.style.background = `linear-gradient(to right, #1DB954 ${progress}%, #333 ${progress}%)`;
                }
            });
        }

        if (timebar && globalAudio) {
            timebar.addEventListener("input", function () {
                const progress = timebar.value;
                globalAudio.currentTime = (progress / 100) * globalAudio.duration;
                timebar.style.background = `linear-gradient(to right, #1DB954 ${progress}%, #333 ${progress}%)`;
                saveTrackState();
            });
        }

        if (soundBar && globalAudio) {
            soundBar.addEventListener("input", () => {
                const volume = soundBar.value / 100;
                globalAudio.volume = volume;
                saveTrackState();
                soundBar.style.background = `linear-gradient(to right, #1DB954 ${soundBar.value}%, #333 ${soundBar.value}%)`;
            });
        }

        if (globalAudio) {
            globalAudio.addEventListener("ended", () => {
                loadTrack(currentTrackIndex + 1, true);
            });
        }

        if (playAllBtn) {
            playAllBtn.addEventListener('click', () => {
                populateTrackList();
                if (trackList.length) loadTrack(0, true);
            });
        }

        playButtons.forEach((button, index) => {
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                populateTrackList();
                loadTrack(index, true);
            });
        });

        document.querySelectorAll('.track').forEach(track => {
            track.addEventListener('dblclick', function () {
                const index = this.getAttribute('data-index');
                if (index !== null) {
                    populateTrackList();
                    loadTrack(parseInt(index), true);
                }
            });
        });

        populateTrackList();

        if (globalAudio && globalAudioSource) {
            loadStoredTrack();
        }

        if (soundBar) {
            soundBar.style.background = `linear-gradient(to right, #1DB954 ${soundBar.value}%, #333 ${soundBar.value}%)`;
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        const dislikeButtons = document.querySelectorAll('.dislike-btn');

        dislikeButtons.forEach(button => {
            if (button.closest('.album-actions').querySelector('a[asp-action="DislikeAlbum"]')) {
                button.classList.add('liked');
            }

            button.addEventListener('click', function (e) {
                e.preventDefault();

                const isLiked = this.classList.contains('liked');
                this.classList.toggle('liked');

                const url = this.getAttribute('href');

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Мрежовият отговор не беше успешен');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            if (!isLiked) {
                                this.querySelector('i').classList.remove('far');
                                this.querySelector('i').classList.add('fas');
                            } else {
                                this.outerHTML = `<a asp-controller="Like" asp-action="LikeAlbum" asp-route-id="${this.getAttribute('asp-route-id')}" class="like-btn" title="Запази в твоята библиотека"><i class="far fa-heart"></i></a>`;
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Грешка:', error);
                        this.classList.toggle('liked');
                    });
            });
        });
    });
</script>