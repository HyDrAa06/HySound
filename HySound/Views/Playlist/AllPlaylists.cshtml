@using HySound.ViewModels.Playlist
@model IEnumerable<PlaylistViewModel>

<div class="playlist-container">
    <div class="playlist-header">
        <h2>Моите плейлисти</h2>
        <button class="add-btn" onclick="openModal('addPlaylistModal')">Добави плейлист</button>
    </div>

    <div class="playlist-grid">
        @foreach (var playlist in Model)
        {
            <div class="playlist-card">
                <div class="playlist-image-container">
                    <img src="@playlist.CoverImage" alt="Cover" class="playlist-cover">
                    <div class="play-button">
                        <i class="fas fa-play"></i>
                    </div>
                </div>
                <div class="playlist-info">
                    <div class="playlist-title">@playlist.Title</div>
                    <div class="playlist-user">@playlist.UserName</div>
                </div>
                <div class="playlist-buttons">
                    <button class="edit-btn" onclick="openModal('editPlaylistModal', '@playlist.Id', '@playlist.Title')">
                        <i class="fas fa-pencil-alt"></i>
                    </button>
                        <a asp-action="Delete" asp-controller="Playlist" asp-route-id="@playlist.Id" class="delete-btn">
                            <i class="fas fa-trash"></i>
                        </a>
                </div>
            </div>
        }
    </div>
</div>

<div class="overlay" id="overlay" onclick="closeModal()"></div>
<div class="modal" id="addPlaylistModal">
    <form method="post" asp-action="AddPlaylist" asp-controller="Playlist" enctype="multipart/form-data">
        <h3>Добави нов плейлист</h3>
        <input type="text" name="Title" id="playlistTitle" placeholder="Заглавие" required>
        <input type="file" name="Picture" id="Picture" required>
        <div class="modal-btns">
            <button type="submit" class="btn save-btn">Запази</button>
            <button type="button" class="cancel-btn" onclick="closeModal()">Отказ</button>
        </div>
    </form>
</div>

<div class="modal" id="editPlaylistModal">
    <h3>Редактирай плейлист</h3>
    <input type="hidden" id="editPlaylistId" name="id">
    <input type="text" id="editPlaylistTitle" name="title" placeholder="Заглавие">
    <input type="file" id="editPlaylistCover" name="picture">
    <div class="modal-btns">
        <button class="save-btn" onclick="updatePlaylist(event)">Запази</button>
        <button class="cancel-btn" onclick="closeModal()">Отказ</button>
    </div>
</div>

<script>
    function openModal(modalId, id = null, title = null) {
        document.getElementById('overlay').style.display = 'block';
        let modal = document.getElementById(modalId);
        modal.style.display = 'block';

        if (modalId === 'editPlaylistModal') {
            document.getElementById('editPlaylistId').value = id;
            document.getElementById('editPlaylistTitle').value = title;
            document.getElementById('editPlaylistCover').value = ''; // Reset file input
        }
    }

    function closeModal() {
        document.getElementById('overlay').style.display = 'none';
        document.querySelectorAll('.modal').forEach(modal => {
            modal.style.display = 'none';
        });
    }

    function updatePlaylist(event) {
        event.preventDefault(); // Prevent any default form submission

        const id = document.getElementById('editPlaylistId').value;
        const title = document.getElementById('editPlaylistTitle').value;
        const fileInput = document.getElementById('editPlaylistCover');
        const formData = new FormData();

        // Debugging: Log values to console
        console.log('ID:', id);
        console.log('Title:', title);
        console.log('File selected:', fileInput.files.length > 0 ? fileInput.files[0].name : 'No file');

        formData.append('id', id);
        formData.append('title', title);
        if (fileInput.files.length > 0) {
            formData.append('picture', fileInput.files[0]);
        }

        fetch('/Playlist/Update', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`HTTP ${response.status}: ${text || 'Update failed'}`);
                    });
                }
                return response.text();
            })
            .then(data => {
                console.log('Success:', data);
                location.reload();
            })
            .catch(error => {
                console.error('Update Error:', error);
                alert('Грешка при редактирането: ' + error.message);
            })
            .finally(() => closeModal());
    }
</script>
<style>
    .playlist-container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    .playlist-image-container {
        position: relative;
        width: 100%;
        height: 180px;
    }

    .playlist-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .playlist-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 20px;
    }

    .playlist-card {
        position: relative;
        background: #181818;
        padding: 15px;
        border-radius: 12px;
        overflow: hidden;
        height: 280px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: transform 0.2s ease, background 0.3s ease-in-out;
    }

        .playlist-card:hover {
            background: #282828;
            transform: scale(1.03);
        }

    .playlist-cover {
        width: 100%;
        height: 180px;
        object-fit: cover;
        border-radius: 10px;
        position: relative;
    }

    .playlist-info {
        text-align: center;
        margin-top: 10px;
    }

    .playlist-title {
        font-weight: bold;
    }

    .playlist-buttons {
        position: absolute;
        bottom: 10px;
        left: 0;
        width: 100%;
        display: flex;
        justify-content: space-between;
        padding: 0 12px;
    }

        .playlist-buttons button {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            transition: transform 0.2s ease, color 0.2s ease;
        }

        .playlist-buttons .edit-btn {
            color: #1db954;
        }

            .playlist-buttons .edit-btn:hover {
                transform: scale(1.2);
                color: #17a44a;
            }

    .delete-form {
        display: inline-block;
        margin: 0;
        padding: 0;
    }

    .delete-btn {
        background: none;
        border: none;
        color: #f44336;
        font-size: 18px;
        cursor: pointer;
        transition: transform 0.2s ease, color 0.2s ease;
        padding: 0;
    }

        .delete-btn:hover {
            transform: scale(1.2);
            color: #d32f2f;
        }

    .play-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #1db954;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .playlist-card:hover .play-button {
        opacity: 1;
    }

    .play-button i {
        font-size: 20px;
        color: white;
    }

    .add-btn {
        background: #1db954;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: 0.3s;
    }

        .add-btn:hover {
            background: #17a44a;
        }

    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #121212;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 0 12px rgba(255, 255, 255, 0.1);
        z-index: 1000;
        width: 350px;
        height: 300px;
        text-align: center;
    }

        .modal input {
            width: 100%;
            padding: 10px;
            margin: 12px 0;
            border: none;
            border-radius: 8px;
            background: #282828;
            color: white;
        }

    .modal-btns {
        display: flex;
        justify-content: space-between;
    }

        .modal-btns button {
            padding: 10px 14px;
            border: none;
            cursor: pointer;
            border-radius: 8px;
        }

    .save-btn {
        background: #1db954;
        color: white;
    }

    .cancel-btn {
        background: #f44336;
        color: white;
    }

    .overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }
</style>
